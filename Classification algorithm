// SVC
from sklearn import svm
X =
y =
SVC = svm.SVC()
SVC.fit(X, y)

// MLP Reseau de neurones
from sklearn.neural_network import MLPClassifier
X = 
y = 
mlp = MLPClassifier(solver='lbfgs', alpha=1e-5,
                     hidden_layer_sizes=(5, 2), random_state=1)
mlp.fit(X, y)

// tree
 from sklearn.datasets import load_iris // Optionnel
 from sklearn import tree
 X, y = load_iris(return_X_y=True)// optionnel
 tree = tree.DecisionTreeClassifier()
 tree = clf.fit(X, y)
 
 //KNN
 from sklearn import neighbors
 clf = neighbors.KNeighborsClassifier(n_neighbors, weights=weights)
 clf.fit(X, y)
 
 //SGD
from sklearn.linear_model import SGDClassifier
X = 
y = 
clf = SGDClassifier(loss="hinge", penalty="l2", max_iter=5)
clf.fit(X, y)

// GaussianNB
 from sklearn.gaussian_process import GaussianProcessClassifier
 from sklearn.gaussian_process.kernels import RBF
 X, y = load_iris(return_X_y=True)
kernel = 1.0 * RBF(1.0)
gpc = GaussianProcessClassifier(kernel=kernel, random_state=0).fit(X, y)

//classification report
from sklearn.metrics import classification_report
print(classification_report(y_true, y_pred, target_names=target_names))

// Appliquer un gridSearch CV pour trouver les bons parametres
 
 
